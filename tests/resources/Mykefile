#!/usr/bin/env python3
# type: ignore

import os
from typing import Dict, List, Optional, Set, Tuple

from myke import arg, import_mykefile, main, shell_task, task


@task(root=True)
def setup():
    """

    hello world

    """
    print("charging lazer beamz")


@task
def hello(name="world"):
    """Say hello."""
    print("hello " + name)


@task(name="hello-named")
def halo(name="world"):
    print("hello " + name)


@task
def x_hello_named2(name="world"):
    print("hello " + name)


@task
def x_hello_named3(name="world"):
    print("hello " + name)


@task
def x_hello_positional(name=arg("world", pos=True)):
    print("hello " + name)


@task
def x_hello_positional_bool(upper: bool = arg(default=False, pos=True)):
    txt: str = "hello world"
    if upper:
        txt = txt.upper()
    print(txt)


@shell_task
def hello_sh(name="world"):
    return f"""
        echo hello {name}

        echo

        echo woohoo
    """


@task
def hello_depends(name="world"):
    output: List[str] = hello_sh_stdout(name)
    assert len(output) == 2
    assert output[0] == f"hello {name}"
    assert output[1] == "woohoo"


@shell_task
def hello_check():
    return "exit 123"


@shell_task(timeout=1)
def hello_timeout():
    return "sleep 2s"


@task
def print_args(args: Optional[List[str]] = arg(pos=True)):
    echo(args)


@task
def print_kwargs(kwargs: Optional[Dict[str, str]] = arg(pos=True)):
    echo(kwargs)


@task
def assert_types(
    xstr,
    xint: int,
    xfloat: float,
    xbool: bool,
    xliststr: List[str],
    xsetint: Set[int],
    xtuplefloat: Tuple[float, ...],
) -> None:
    assert isinstance(xstr, str)
    assert isinstance(xint, int)
    assert isinstance(xfloat, float)
    assert isinstance(xbool, bool)
    assert isinstance(xliststr, list)
    assert isinstance(xliststr[0], str)
    assert isinstance(xsetint, set)
    assert isinstance(list(xsetint)[0], int)
    assert isinstance(xtuplefloat, tuple)
    assert isinstance(xtuplefloat[0], float)


dir_name: str = os.path.dirname(__name__)
other_myke: str = os.path.join(dir_name, "otherMykefile")

import_mykefile(other_myke)

if __name__ == "__main__":
    main(__file__)
